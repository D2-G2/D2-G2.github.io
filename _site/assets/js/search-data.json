{"0": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "타입스크립트로 마이그레이션하기",
    "content": "2024. 1.24. typescript . migration . INDEX . | 1. 마이그레이션을 하기에 앞서 | 2. 모던 자바스크립트로 작성하기 | 3. 타입스크립트 도입 전에 @ts-check로 시험해보기 | 4. allowJs로 타입스크립트와 자바스크립트 같이 사용하기 | 5. 의존성 관계에 따라 모듈 단위로 전환하기 | 6. 마이그레이션의 완성을 위해 noImplicitAny 설정하기 | . ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/"
  },"1": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "1. 마이그레이션을 하기에 앞서",
    "content": "큰 프로젝트를 타이스크립트로 마이그레이션 하는 작업은 어렵지만, 프로젝트 품질을 크게 개선할 수 있는 가능성을 열어 줍니다. 점진적 마이그레이션 . 프로젝트를 타입스크립트로 마이그레이션 하기로 결정했다면, 점진적 마이그레이션을 통해 실험해 보고 테스트해야 합니다. 진행 상황 모니터링 . 마이그레이션 작업은 오랜 시간이 필요하기 때문에, 진행 상황을 모니터링하고 추적해서 중복된 작업을 방지해야 합니다. 마이그레이션의 진행 상황을 수치화하여 눈으로 볼 수 있게 하면 진행상황을 파악하기도 쉽고, 팀원들을 동기부여하는 효과도 얻을 수 있습니다. ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/#1-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98%EC%9D%84-%ED%95%98%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/#1-마이그레이션을-하기에-앞서"
  },"2": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "2. 모던 자바스크립트로 작성하기",
    "content": "마이그레이션을 어디서부터 시작해야 할 지 몰라 막막하다면 옛날 버전의 자바스크립트 코드를 최신 버전의 자바스크립트로 바꾸는 작업부터 시작해 보는 것도 좋습니다. 타입스크립트는 자바스크립트의 상위집합이기 떄문에 코드를 최선 버전으로 바꾸다 보면 타입스크립트의 일부를 저절로 익힐 수 있게 됩니다. 옛날 버전의 자바스크립트 코드를 최신 버전의 자바스크립트로 바꾸는 작업은 타입스크립트로 전환하는 작업의 일부로 볼 수 있습니다. ECMAScript 모듈 사용하기 . ES2015부터 import와 export를 사용하는 ESM이 표준이 되었습니다. 만약 마이그레이션 대상인 자바스크립트 코드가 단일 파일이거나 비표준 모듈 시스템을 사용 중이라면 ESM으로 전환하는 것이 좋습니다. ESM은 타입스크립트에서도 잘 동작하며, 모듈 단위로 전환할 수 있게 해 주기 때문에 점진적 마이그레이션이 월활해집니다. ESM을 사용하기 위해서는 프로젝트 종류에 따라 webpack이나 ts-node 같은 도구가 필요한 경우도 있습니다. 프로토타입 대신 클래스 사용하기 . 마이그레이션하려는 코드에서 단순한 객체를 다룰 떄 프로토타입을 사용하고 있었다면 클래스로 바꾸는 것이 좋습니다. 프토토타입으로 구현한 Person 객체보다 클래스로 구현한 Person 객체가 문법이 간결하고 직관적입니다. var 대신 let/const 사용하기 . var 키워드를 let이나 const로 변경하면, 일부 코드에서 타입스크립트가 오류를 표시할 수도 있습니다. 오류가 발생한 부분은 잠재적으로 스코프 문제가 존재하는 코드이기 때문에 수정해야 합니다. 중첩함수 대신 함수 표현식 사용하기 . 중첩함수의 호이스팅은 실행 순서를 예상하기 어렵게 만들고 직관적이지 않습니다. 대신 함수 표현식(const bar = () =&gt; { … })을 사용하여 호이스팅 문제를 피하는 것이 좋습니다. for(;;) 대신 for-of 또는 배열 메서드 사용하기 . for-of 루프는 코드가 짧고 인덱스 변수를 사용하지도 않기 때문에 실수를 줄일 수 있습니다. 인덱스 변수가 필요한 경우엔 forEach 메서드를 사용하면 됩니다. 함수 표현식보다 화살표 함수 사용하기 . 일반적으로는 this가 클래스 인스턴스를 참조하는 것을 기대하지만 예상치 못한 결과가 나오는 경우도 있습니다. 인라인(또는 콜백)에서는 일반 함수보다 화살표 함수가 더 직관적이며 코드도 간결해지기 때문에 가급적 화살표 함수를 사용하는 것이 좋습니다. 컴파일러 옵션(tsconfig.json)에 noImplicitThis(또는 strict)를 설정하면, 타입스크립트가 this 바인딩 관련된 오류를 표시해 주므로 설정하는 것이 좋습니다. 단축 객체 표현과 구조 분해 할당 사용하기 . 단축 객체 표현과 구조 분해 할당을 사용하면 코드가 더 간결하고 중복된 이름을 생략하기 때문에 가독성이 좋고 실수가 적습니다. 함수 매개변수 기본값 사용하기 . 매개변수에 기본값을 지정하면 코드가 간결해질 뿐만 아니라 해당 매개변수가 선택적 매개변수라는 것을 명확히 나타내는 효과도 줄 수 있습니다. 기본값을 지정하면 기본값을 기반으로 타입 추론이 가능하기 때문에, 타입스크립트로 마이그레이션할 때 매개변수에 타입 구문을 쓰지 않아도 됩니다. 저수준 프로미스나 콜백 대신 async/await 사용하기 . async/await를 사용하면 코드가 간결해져서 버그나 실수를 방지할 수 있고, 비동기 코드에 타입 정보가 전달되어 타입 추론을 가능하게 합니다. 타입스크립트에 use strict 넣지 않기 . 타입스크립트에서 수행되는 안전성 검사(sanity check)가 엄격 모드보다 훨씬 더 엄격한 체크를 하기 때문에, 타입스크립트 코드에서 ‘use strict’는 무의미합니다. 코드에 ‘use strict’를 대신 컴파일러 옵션의 alwaysStrict 설정을 사용해야 합니다. ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/#2-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/#2-모던-자바스크립트로-작성하기"
  },"3": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "3. 타입스크립트 도입 전에 @ts-check로 시험해보기",
    "content": "@ts-check 지시자를 사용하면 타입스크립트 전환시에 어떤 문제가 발생하는지 미리 시험해 볼 수 있습니다. @ts-check 지시자를 사용하여 타입 체커가 파일을 분석하고, 발견된 오류를 보고하도록 지시합니다. 그러나, @ts-check 지시자는 noImplicitAny 설정을 해제한 것 보다 헐거운 체크를 수행한다는 점을 주의해야 합니다. 선언되지 않은 전역 변수 . 어딘가에 숨어있는 변수가 있다면, 변수를 제대로 인식할 수 있게 별도로 타입 선언 파일을 만들어야 합니다. d.ts 파일(정의 파일)을 통해 프로젝트 타입 선언의 초석을 만들 수 있습니다. 알 수 없는 라이브러리 . 서드파티 라이브러리의 경우 타입 정보를 알아야 합니다. npmjs.com에서 ‘TS’로 표시된다면 타입스크립를 지원하는 라이브러리이며, ‘DT’로 표시되어 있다면 @types/라이브러리명을 통해 타입 선언을 추가로 설치해줘야 합니다. ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/#3-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8F%84%EC%9E%85-%EC%A0%84%EC%97%90-ts-check%EB%A1%9C-%EC%8B%9C%ED%97%98%ED%95%B4%EB%B3%B4%EA%B8%B0",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/#3-타입스크립트-도입-전에-ts-check로-시험해보기"
  },"4": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "4. allowJs로 타입스크립트와 자바스크립트 같이 사용하기",
    "content": "한꺼번에 타입스크트로 마이그레이션이 어려울 경우, 컴파일러 옵션의 allowJs를 통해 마이그레이션 기간 중에 자바스크립트와 타입스크립트가 동시에 동작할 수 있도록 해야 합니다. 대규모 마이그레이션 작업을 시작하기 전에, 테스트와 빌드 체인에 타입스크립트를 적용해야 합니다. (컴파일러 옵션의 outDir, target, module 활용) . ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/#4-allowjs%EB%A1%9C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/#4-allowjs로-타입스크립트와-자바스크립트-같이-사용하기"
  },"5": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "5. 의존성 관계에 따라 모듈 단위로 전환하기",
    "content": "점진적 마이그레이션을 할 때는 모듈 단위로 각개격파하는 것이 이상적입니다. 의존성과 관련된 오류없이 작업하려면, 다른 모듈에 의존하지 않는 최하단 모듈부터 작업을 시작해서 의존성의 최상단에 있는 모듈을 마지막으로 완성해야 합니다. 외부 API의 타입 정보는 특별한 문맥이 없기 때문에 타입스크립트가 추론하기 어렵고, 그렇기 때문에 API에 대한 사양을 기반으로 타입 정보를 생성해야 합니다. 모듈 단위로 마이그레이션을 시작하기 전에, 모듈간의 의존성 관계를 시각화해 보면 많은 도움이 됩니다. 마이그레이션할 때는 타입 정보 추가만 해야 하고, 리팩터링은 해서는 안됩니다. 당장의 목표는 코드 개선이 아니라 타입스크립트로 전환하는 것임을 명심해야 합니다. 개선이 필요한 부분을 찾게 된다면 나중에 리팩터링할 수 있도록 목록을 만들어 둡시다. 선언되지 않은 클래스 멤버 . 자바스크립트는 클래스 멤버 변수를 선언할 필요가 없지만, 타입스크립트에서는 명시적으로 선언해야 합니다. -&gt; quick fix 기능을 통해 간단히 해결가능 합니다. -&gt; quick fix를 적용한 후에 속성을 훑어보고 any로 추론된 부분은 직접 수정해야 합니다. 자바스크립트 코드를 타입스크립트로 전환하다 보면, 잘못된 설계를 발견하는 효과가 있습니다. 하지만! 리팩터링을 하면 안 됩니다. 개선할 부분을 기록해 두고, 리팩터링은 타입스크립트 전환 작업이 완료된 후에 생각해야 합니다. 타입이 바뀌는 값 . 임시 방편으로 타입 단언문을 사용할 수도 있습니다. 당장은 마이그레이션이 중요하기 때문에 타입 단언문을 사용한 것이며, 마이그레이션이 완료된 후에는 문제를 제대로 해결해야 합니다. 테스트 코드 . 로직 코드가 테스트 코드에 의존하지 않기 때문에, 테스트 코드는 항상 의존성 관계도의 최상단에 위치하며 마이그레이션의 마지막 단계가 되는 것은 자연스러운 일입니다. 최하단의 모듈부터 타입스크립트로 전환하는 와중에도 테스트 코드는 변경되지 않고, 마이그레이션 기간 중에 테스트를 수행할 수 있습니다. ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/#5-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EA%B3%84%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%AA%A8%EB%93%88-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/#5-의존성-관계에-따라-모듈-단위로-전환하기"
  },"6": {
    "doc": "타입스크립트로 마이그레이션하기",
    "title": "6. 마이그레이션의 완성을 위해 noImplicitAny 설정하기",
    "content": "noImplicitAny가 설정되지 않은 상태에서는 타입 선언에서 비롯되는 실제 오류가 숨어 있기 때문에 마이그레이션이 완료되었다고 할 수 없습니다. 빌드가 실패하는 것을 방지하기 위해, 처음에는 noImplicitAny를 로컬에만 설정하고 작업하는 것이 좋습니다. 타입 체커가 발생하는 오류의 개수는 noImplicitAny와 관련된 작업의 진척도를 나타내는 지표로 활용할 수 있습니다. 최종적으로 가장 강력한 설정은 “strict”: true 입니다. 타입체크의 강도를 조절하여 팀원들이 타입스크립트에 익숙해질 수 있도록 시간을 줄 수 있습니다. 참고자료 . 댄 밴더캄, ⌜이펙티브 타입스크립트⌟, 프로그래밍인사이트, 장원호 옮김, 2021 . ",
    "url": "/docs/Dev/TypeScript/2024-01-24-1/#6-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98%EC%9D%98-%EC%99%84%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%B4-noimplicitany-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/Dev/TypeScript/2024-01-24-1/#6-마이그레이션의-완성을-위해-noimplicitany-설정하기"
  },"7": {
    "doc": "프리온보딩 FE 챌린지 2월 사전과제",
    "title": "프리온보딩 FE 챌린지 2월 사전과제",
    "content": "2024. 1.24. Index . | 1. SSR과 CSR에서의 주요 차이점은 무엇인가요? | 2. React와 Next.js중 어떤 상황에서 각각을 선택해야 하나요? | 3. PWA를 구현할 때 Service Worker의 역할은 무엇인가요? | 4. SSR, CSR, SPA, PWA, Electron등 다양한 전략이 있는데, 각 전략들은 어떤 상황에 사용되는 것이 적합하며 비즈니스에 어떤 이점을 가져다줄까요? | . ",
    "url": "/docs/Course/fechallenge02/2024-01-24-2/",
    
    "relUrl": "/docs/Course/fechallenge02/2024-01-24-2/"
  },"8": {
    "doc": "프리온보딩 FE 챌린지 2월 사전과제",
    "title": "1. SSR과 CSR에서의 주요 차이점은 무엇인가요?",
    "content": "SSR . SSR은 서버 측에서 전체 페이지를 렌더링하고, 완성된 HTML을 클라이언트로 전송하는 방식입니다. SSR은 항상 최신 데이터를 기반으로 초기 화면을 그릴 수 있어, SEO에 대한 유효성을 기대할 수 있습니다. 하지만, 서버에서 어느 정도의 처리를 해야 하므로, 지연이 높아질 가능성이 있습니다. CSR . CSR은 클라이언트 측에서 JavaScript를 이용해 페이지를 동적으로 렌더링하는 방식입니다. 서버는 HTML 골격과 JavaScript 파일을 전송하고, 페이지의 렌더링은 사용자의 브라우저에서 이루어집니다. CSR은 빌드 시에 데이터를 얻지 않고, 페이지를 화면에 그려 저장합니다. 또한 브라우저에서 초기 화면�그리기를 한 뒤, 비동기로 데이터를 얻어서 추가 데이터를 표시합니다. ",
    "url": "/docs/Course/fechallenge02/2024-01-24-2/#1-ssr%EA%B3%BC-csr%EC%97%90%EC%84%9C%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94",
    
    "relUrl": "/docs/Course/fechallenge02/2024-01-24-2/#1-ssr과-csr에서의-주요-차이점은-무엇인가요"
  },"9": {
    "doc": "프리온보딩 FE 챌린지 2월 사전과제",
    "title": "2. React와 Next.js중 어떤 상황에서 각각을 선택해야 하나요?",
    "content": "React . React는 프로젝트의 구조를 제어하고 싶거나 커스터마이징이 필요한 프로젝트일 경우 적합합니다. 또한 클라이언트 측에서 동적인 상호작용이 많은 웹 애플리케이션일 경우 적합합니다. Next.js . Next.js는 SEO 최적화가 중요하거나 초기 로딩 성능과 빠른 렌더링이 필요한 프로젝트일 경우에 적합합니다. 또한 구성이 사전에 설정되어 있어 개발 시작 시간을 단축하고 싶을 때에도 유용합니다. ",
    "url": "/docs/Course/fechallenge02/2024-01-24-2/#2-react%EC%99%80-nextjs%EC%A4%91-%EC%96%B4%EB%96%A4-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EA%B0%81%EA%B0%81%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%B4%EC%95%BC-%ED%95%98%EB%82%98%EC%9A%94",
    
    "relUrl": "/docs/Course/fechallenge02/2024-01-24-2/#2-react와-nextjs중-어떤-상황에서-각각을-선택해야-하나요"
  },"10": {
    "doc": "프리온보딩 FE 챌린지 2월 사전과제",
    "title": "3. PWA를 구현할 때 Service Worker의 역할은 무엇인가요?",
    "content": "방문한 웹 페이지나 앱의 자원을 캐시에 저장하여 네트워크 연결이 불안정하거나 오프라인 상태에서도 빠르게 콘텐츠를 로드할 수 있게 합니다. 또한 푸시 알림을 통해 사용자가 사용하지 않을 때도 중요한 정보나 업데이트를 알릴 수 있습니다. ",
    "url": "/docs/Course/fechallenge02/2024-01-24-2/#3-pwa%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EB%95%8C-service-worker%EC%9D%98-%EC%97%AD%ED%95%A0%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94",
    
    "relUrl": "/docs/Course/fechallenge02/2024-01-24-2/#3-pwa를-구현할-때-service-worker의-역할은-무엇인가요"
  },"11": {
    "doc": "프리온보딩 FE 챌린지 2월 사전과제",
    "title": "4. SSR, CSR, SPA, PWA, Electron등 다양한 전략이 있는데, 각 전략들은 어떤 상황에 사용되는 것이 적합하며 비즈니스에 어떤 이점을 가져다줄까요?",
    "content": "SSR . SSR은 항상 최신 데이터를 기반으로 초기 화면을 그릴 수 있어, SEO에 대한 유효성을 기대할 수 있기 때문에 항상 최신 데이터를 표시하고자 하는 경우에 적합합니다. SSR을 통해 SEO 성능과 검색 엔진의 가시성이 향상되어 방문자 수가 증가하는 이점을 기대할 수 있습니다. CSR . CSR은 서버 부하를 줄여주고, 사용자 인터페이스의 반응성을 높여줄 수 있기 때문에 사용자와의 상호작용이 많고 동적인 웹 애플리케이션에 적합합니다. CSR을 통해 사용자 인터페이스를 부드럽고 반응성 있게 만들어 사용자 경험을 향상시킬 수 있습니다. SPA . SPA는 서버 요청이 감소하여 로딩 시간이 줄어들고, 사용자의 경험이 매끄러지기 때문에 사용자가 웹 애플리케이션과 지속적으로 상호작용해야 하는 경우에 적합합니다. SPA를 사용하면 사용자가 애플리케이션과 상호작용할 때 페이지를 새로 로드할 필요가 없어져 애플리케이션의 성능 개선을 기대할 수 있습니다. PWA . PWA는 모바일 사용자를 대상으로 네이티브 앱과 유사한 사용자 경험을 제공하고자 할 때 적합합니다. 설치 없이 앱과 같은 경험을 제공하여 사용자 참여도를 높일 수 있으며, 오프라인 지원을 통해 접근성을 향상시킬 수 있습니다. 또한 네이티브 앱에 비해 낮은 개발 및 유지보수 비용을 기대할 수 있습니다. Electron . Electron은 웹 기술을 사용하여 데스크톱 애플리케이션을 개발하고자 할 때 혹은 크로스 플랫폼 지원이 필요한 경우에 적합합니다. Electron 활용을 통해 개발 비용과 시간을 절약할 수 있고 웹 개발자가 쉽게 데스크톱 애플리케이션을 개발할 수 있게 됩니다. ",
    "url": "/docs/Course/fechallenge02/2024-01-24-2/#4-ssr-csr-spa-pwa-electron%EB%93%B1-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%A0%84%EB%9E%B5%EC%9D%B4-%EC%9E%88%EB%8A%94%EB%8D%B0-%EA%B0%81-%EC%A0%84%EB%9E%B5%EB%93%A4%EC%9D%80-%EC%96%B4%EB%96%A4-%EC%83%81%ED%99%A9%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A0%81%ED%95%A9%ED%95%98%EB%A9%B0-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4%EC%97%90-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%84-%EA%B0%80%EC%A0%B8%EB%8B%A4%EC%A4%84%EA%B9%8C%EC%9A%94",
    
    "relUrl": "/docs/Course/fechallenge02/2024-01-24-2/#4-ssr-csr-spa-pwa-electron등-다양한-전략이-있는데-각-전략들은-어떤-상황에-사용되는-것이-적합하며-비즈니스에-어떤-이점을-가져다줄까요"
  },"12": {
    "doc": "함수형 프로그래밍이란?",
    "title": "함수형 프로그래밍이란?",
    "content": "2024. 1.29. Functional Programming . INDEX . | 1. 함수형 프로그래밍을 공부하게 된 이유? | 2. 함수형 프로그래밍이란? | 3. 함수형 프로그래밍의 핵심 | 4. 실용적인 측면의 고려사항 | 5. 액션, 계산, 데이터의 구분 | 6. 함수형 프로그래밍의 장점 | 7. 함수형 프로그래밍의 적용 | . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/"
  },"13": {
    "doc": "함수형 프로그래밍이란?",
    "title": "1. 함수형 프로그래밍을 공부하게 된 이유?",
    "content": "코드를 작성할 때, 습관적으로 작성하게 되는 패턴이 있지만 프로젝트의 규모가 커질수록 가독성이 떨어지고 일관성이 없어진다는 생각이 들었습니다. 이를 개선하기 위해서는 코드를 작성하기 전에 명확한 기준과 계획을 가지고 시작할 필요가 있다고 생각하였습니다. 그 중 함수형 프로그래밍은 코드의 가독성과 유지보수성 향상과 더불어 효율적인 상태 관리와 리액티브 프로그래밍과의 연계성 까지 있기 때문에 앞으로 프론트엔드 개발자로 성장을 해나갈 때 큰 도움이 될 것이라고 생각하였습니다. 또한 다수의 저명한 프로그래머들이 함수형 프로그래밍에 대해 평가한 문구들도 아주 매력적으로 느껴졌습니다. “함수형 프로그래밍은 모든 것을 함수로 생각하게 만듭니다. 이것은 매우 강력한 아이디어입니다. 코드를 작성하는 새로운 방법을 제공하고, 프로그래밍에 대한 근본적인 사고방식을 바꿀 수 있습니다.” - Simon Peyton Jones . “함수형 프로그래밍은 당신이 문제를 어떻게 해결할 것인가가 아니라 무엇을 해결할 것인가에 집중하게 만듭니다. 이는 추상화와 코드의 명확성을 증가시킵니다.” - Robert C. Martin . 그렇다면 함수형 프로그래밍이란 무엇일까요? . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#1-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#1-함수형-프로그래밍을-공부하게-된-이유"
  },"14": {
    "doc": "함수형 프로그래밍이란?",
    "title": "2. 함수형 프로그래밍이란?",
    "content": "함수형 프로그래밍은 마치 수학 함수와 같이 동작하는 코드를 만드는 프로그래밍 방식입니다. 특히 부수 효과(side effect)를 최소화하고, 순수 함수(pure function)를 중심으로 코드를 구성하는 것을 강조합니다. 함수형 프로그래밍을 통해 코드의 품질을 향상시키고, 유지보수를 용이하게 할 수 있습니다. 복잡한 시스템을 다루는 경우, 함수형 프로그래밍 패러다임이 큰 도움이 될 수 있습니다. 이제 이 개념들을 좀 더 쉽게 이해할 수 있도록 간략히 소개해보겠습니다. ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#2-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#2-함수형-프로그래밍이란"
  },"15": {
    "doc": "함수형 프로그래밍이란?",
    "title": "3. 함수형 프로그래밍의 핵심",
    "content": "순수 함수(pure function) 사용 . 입력에만 의존하여, 동일한 입력에 대해 항상 같은 결과를 반환합니다. function sum(a: number, b: number): number { return a + b; } console.log(sum(3, 4)); // 항상 7을 반환 . 부수 효과(side effect) 최소화 . 함수가 결과값 외에 다른 일을 하는 것을 최대한 피합니다. 예를 들어, 파일 읽기나 이메일 보내기와 같은 행위는 부수 효과에 해당합니다. let count: number = 0; function increment(): void { count += 1; } increment(); console.log(count); // count는 함수 외부 상태에 의존하며, 함수 호출 결과로 외부 상태가 변경됩니다. ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#3-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%95%B5%EC%8B%AC",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#3-함수형-프로그래밍의-핵심"
  },"16": {
    "doc": "함수형 프로그래밍이란?",
    "title": "4. 실용적인 측면의 고려사항",
    "content": "부수 효과의 필요성 . 실제 프로그래밍에서 부수 효과 없이는 작업이 어렵습니다. 파일을 읽고 쓰거나, 네트워크 요청을 보내는 등의 작업이 필요합니다. import * as fs from 'fs'; function writeFile(filename: string, content: string): void { fs.writeFileSync(filename, content); } writeFile('test.txt', 'Hello, World!'); // 파일 시스템에 'test.txt' 파일을 생성하며 내용을 씁니다. 부수 효과 관리 . 함수형 프로그래밍에서는 부수 효과를 다루는 방법이 존재하며, 이를 통해 실용적인 프로그래밍이 가능합니다. ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#4-%EC%8B%A4%EC%9A%A9%EC%A0%81%EC%9D%B8-%EC%B8%A1%EB%A9%B4%EC%9D%98-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#4-실용적인-측면의-고려사항"
  },"17": {
    "doc": "함수형 프로그래밍이란?",
    "title": "5. 액션, 계산, 데이터의 구분",
    "content": "액션 . 시점과 횟수에 의존하는 작업입니다. 예를 들어, 사용자의 입력 처리나 네트워크 요청 등이 액션에 해당합니다. function changeBackgroundColor(color: string): void { document.body.style.backgroundColor = color; } changeBackgroundColor('blue'); // 웹 페이지의 배경색을 파란색으로 변경합니다. 계산 . 입력만으로 결과를 낼 수 있는 순수한 작업입니다. 계산은 부수 효과가 없고, 동일한 입력에 대해 항상 동일한 결과를 반환합니다. function getStringLength(string: string): number { return string.length; } console.log(getStringLength('Hello, World!')); // 13을 반환 . 데이터 . 정보 그 자체입니다. 데이터는 변하지 않으며, 액션과 계산의 대상이 됩니다. interface User { name: string; age: number; } const user: User = { name: 'Munseok', age: 20 }; console.log(user.name); // 'Munseok' . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#5-%EC%95%A1%EC%85%98-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EA%B5%AC%EB%B6%84",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#5-액션-계산-데이터의-구분"
  },"18": {
    "doc": "함수형 프로그래밍이란?",
    "title": "6. 함수형 프로그래밍의 장점",
    "content": "예측 가능성 . 순수 함수를 사용함으로써 코드의 동작을 예측하기 쉽습니다. 모듈성 . 코드를 잘게 나누어 관리하기 쉽습니다. 재사용성 . 순수 함수는 다양한 상황에서 재사용할 수 있습니다. ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#6-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EC%9E%A5%EC%A0%90",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#6-함수형-프로그래밍의-장점"
  },"19": {
    "doc": "함수형 프로그래밍이란?",
    "title": "7. 함수형 프로그래밍의 적용",
    "content": "분산 시스템 . 함수형 프로그래밍은 메시지 순서가 바뀌거나, 중복되거나, 유실될 수 있는 분산 시스템에서 특히 유용합니다. 액션의 관리 . 코드에서 잘 관리해야 할 부분을 명확히 하여, 시스템의 안정성을 높입니다. 참고자료 . 유인동, ⌜함수형 자바스크립트 프로그래밍⌟, 프로그래밍인사이트, 2017 에릭 노먼드, ⌜쏙쏙 들어오는 함수형 코딩⌟, 제이펍, 김은민 옮김, 2022 . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#7-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EC%A0%81%EC%9A%A9",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-1/#7-함수형-프로그래밍의-적용"
  },"20": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "액션, 계산, 데이터 구분 실습",
    "content": "2024. 1.29. Functional Programming . INDEX . | 1. 상황 | 2. 과정 | 3. Level 1 | 4. Level 2 | 5. Level 3 | 6. 구현 | . 쏙쏙 들어오는 함수형 코딩 Ch.1 부터 Ch.3 까지 학습한 내용을 바탕으로 액션과 계산, 데이터를 나누는 연습을 하고자 합니다. 다음과 같은 상황을 만들고 이에 필요한 액션과 계산 데이터를 설계한 후 TypeScript와 Express, MySQL 환경을 가정하여 코드로 구현까지 진행해보겠습니다. ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/"
  },"21": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "1. 상황",
    "content": "고객은 웹사이트를 통해 음식을 주문할 수 있습니다. 고객은 메뉴에서 음식을 선택하고, 주문을 완료하기 위해 결제 정보를 입력합니다. 주문이 완료되면, 주방에 주문 내역이 전송되고, 음식 준비가 시작됩니다. 준비된 음식은 배달부를 통해 고객에게 배달됩니다. ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#1-%EC%83%81%ED%99%A9",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#1-상황"
  },"22": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "2. 과정",
    "content": ". | 고객 주문: . | 고객이 웹사이트에서 메뉴를 확인하고, 원하는 음식을 선택합니다. | 고객이 결제 정보를 입력하고, 주문을 확인합니다. | . | 주방 처리: . | 주문이 주방에 전달됩니다. | 주방에서는 주문된 음식을 준비합니다. | . | 음식 배달: . | 준비된 음식은 배달부에게 전달됩니다. | 배달부는 주소에 따라 음식을 고객에게 배달합니다. | . | . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#2-%EA%B3%BC%EC%A0%95",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#2-과정"
  },"23": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "3. Level 1",
    "content": "액션 . | 메뉴 리스트 DB 가져오기 | 주문 접수하기 | 결제 처리 | 주문 내역 DB에 저장 | 주방으로 주문 전달 | 배달 시작 알림 | . 계산 . | 총 주문 금액 계산 | 할인 금액 계산 | 주문 가능 여부 확인 | . 데이터 . | 메뉴 리스트 . | 주문 가능한 음식 목록 | 품절된 음식 목록 | . | 주문 리스트 . | 결제정보 | 고객 id | 주소 | 주문한 음식명 | 주문한 음식 수 | . | 고객 목록 | . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#3-level-1",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#3-level-1"
  },"24": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "4. Level 2",
    "content": "액션 . | 고객 인터페이스 관리 . | 고객의 웹사이트 접속 | 고객의 메뉴 탐색 | 고객의 메뉴 선택, 주문 | 고객의 결제정보 입력 | . | 주문 처리 . | 주문 정보 검증 | 결제 처리 | 주문 상태 업데이트 . | 접수 대기 중 | 접수 완료 | . | . | 주방 관리 . | 주방에 주문 내역 전달 | 주문 상태 관리 . | 음식 조리 중 | 라이더에게 전달 완료 | . | . | 배달 관리 . | 준비된 음식 배달부에게 전달 | 배달 상태 업데이트 . | 배달 중 | 배달 완료 | . | . | . 계산 . | 금액 계산 . | 각 메뉴의 가격과 선택된 수량에 따른 총금액 계산 | 적용 가능한 할인 계산하여 최종 결제 금액 산출 | . | 주문 검증 . | 메뉴 재고와 주문 수량 비교 | 주문 가능 여부 결정 | . | 배달 시간 계산 . | 주방의 현재 상태, 주문 크기, 배달 지역 고려하여 예상 배달 시간 계산 | . | . 데이터 . | 메뉴 데이터 . | 이름 | 가격 | 설명 | 재고 상태 | . | 주문 데이터 . | 주문정보 . | 주문ID | 고객ID | 주문한 메뉴 | 수량 | 주문 시각 | . | 결제 정보 . | 결제 방법 | 결제 상태 | 결제 금액 | . | 배달 정보 . | 배달 주소 | 예상 배달 시간 | 배달 상태 | . | . | 고객 데이터 . | 고객정보 . | 고객 ID | 이름 | 연락처 | 주소 | . | . | 재고 데이터 . | 각 메뉴의 현재 재고 수량 | . | 라이더 데이터 . | 라이더 정보 . | 라이더 ID | 이름 | 현재 상태 . | 대기 중 | 배달 중 | . | . | . | . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#4-level-2",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#4-level-2"
  },"25": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "5. Level 3",
    "content": "액션 . | 고객 인터페이스 관리 . | 고객의 웹사이트 접속 | 고객에게 메뉴 표시 | 고객에게 로그인 페이지 표시 | 고객의 로그인 정보를 받고 검증 | 고객의 메뉴 탐색 | 고객의 메뉴 선택, 주문 | 고객의 주문 내용 확인 | 고객의 결제정보 입력 | . | 주문 처리 . | 주문 정보 검증 | 결제 처리 | 주문 상태 업데이트 . | 접수 대기 중 | 접수 완료 | . | . | 주방 관리 . | 주방에 주문 내역 전달 | 주문 상태 관리 . | 음식 조리 중 | 라이더에게 전달 완료 | . | . | 배달 관리 . | 준비된 음식 라이더에게 전달 | 배달 상태 업데이트 . | 배달 중 | 배달 완료 | . | . | . 계산 . | 금액 계산 . | 각 메뉴의 가격과 선택된 수량에 따른 총금액 계산 | 적용 가능한 할인 계산하여 최종 결제 금액 산출 | . | 주문 검증 . | 메뉴 재고와 주문 수량 비교 | 주문 가능 여부 결정 | . | 배달 시간 계산 . | 주방의 현재 상태, 주문 크기, 배달 지역 고려하여 예상 배달 시간 계산 | . | 로그인 유효성 검증 . | 입력된 로그인 정보의 유효성 검증 | 로그인 성공 여부 결정 | . | . 데이터 . | 메뉴 데이터 . | 이름 | 가격 | 설명 | 재고 상태 | . | 주문 데이터 . | 주문정보 . | 주문ID | 고객ID | 주문한 메뉴 | 수량 | 주문 시각 | . | 결제 정보 . | 결제 방법 | 결제 상태 | 결제 금액 | . | 배달 정보 . | 배달 주소 | 예상 배달 시간 | 배달 상태 | . | . | 고객 데이터 . | 고객정보 . | 고객 ID | 이름 | 연락처 | 주소 | . | 로그인 정보 . | 아이디 | 비밀번호 | 로그인 상태 | . | . | 재고 데이터 . | 각 메뉴의 현재 재고 수량 | . | 라이더 데이터 . | 라이더 정보 . | 라이더 ID | 이름 | 현재 상태 . | 대기 중 | 배달 중 | . | . | . | . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#5-level-3",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#5-level-3"
  },"26": {
    "doc": "액션, 계산, 데이터 구분 실습",
    "title": "6. 구현",
    "content": "이제 개발 환경을 설정하고 설계한 액션, 계산, 데이터를 구현해보겠습니다. 언어 : TypeScript . 런타임 환경 : Node.js . 프레임워크 및 라이브러리 : express.js . DB : MySQL . 함수형 프로그래밍에서의 일반적인 구현순서 . 데이터 ➡️ 계산 ➡️ 액션 . 데이터 . // 메뉴 데이터 type Menu = { name: string, price: number, description: string, stock: number }; // 주문 데이터 type Order = { orderId: string, customerId: string, items: { menuId: string, quantity: number }[], orderTime: Date, paymentInfo: PaymentInfo, deliveryInfo: DeliveryInfo }; // 결제 정보 type PaymentInfo = { method: string, status: 'pending' | 'completed' | 'failed', amount: number }; // 배달 정보 type DeliveryInfo = { address: string, estimatedDeliveryTime: Date, status: 'preparing' | 'delivering' | 'delivered' }; // 고객 데이터 type Customer = { customerId: string, name: string, contact: string, address: string, loginInfo: LoginInfo }; // 로그인 정보 type LoginInfo = { username: string, password: string, hashed status: 'loggedOut' | 'loggedIn' }; // 재고 데이터 type Stock = { menuId: string, quantity: number }; // 라이더 데이터 type Rider = { riderId: string, name: string, status: 'waiting' | 'delivering' }; . 계산 . // 금액 계산 const calculateTotalAmount = (items: { menuId: string, quantity: number }[], menuData: Menu[]): number =&gt; { return items.reduce((total, item) =&gt; { const menu = menuData.find(menu =&gt; menu.name === item.menuId); return total + (menu ? menu.price * item.quantity : 0); }, 0); }; // 주문 가능 여부 검증 const verifyOrder = (order: Order, stockData: Stock[]): boolean =&gt; { return order.items.every(item =&gt; { const stockItem = stockData.find(stock =&gt; stock.menuId === item.menuId); return stockItem ? stockItem.quantity &gt;= item.quantity : false; }); }; // 배달 시간 계산 (예시, 실제 계산은 더 복잡할 수 있음) const calculateDeliveryTime = (order: Order, currentStatus: string): Date =&gt; { const currentTime = new Date(); // 예상 시간 계산 로직 (단순화) currentTime.setHours(currentTime.getHours() + 1); // 단순히 현재 시간에 1시간 추가 return currentTime; }; // 로그인 유효성 검증 const verifyLogin = (loginInfo: LoginInfo, customerData: Customer[]): boolean =&gt; { const customer = customerData.find(customer =&gt; customer.loginInfo.username === loginInfo.username); return customer ? customer.loginInfo.password === loginInfo.password : false; }; . 액션 . // 고객에게 메뉴 표시 app.get('/menu', (req: Request, res: Response) =&gt; { connection.query('SELECT * FROM Menu', (error: mysql.MysqlError, results: Menu[]) =&gt; { if (error) throw error; res.send(results); }); }); // 고객의 로그인 정보를 받고 검증 app.post('/login', (req: Request, res: Response) =&gt; { const { username, password } = req.body; connection.query('SELECT * FROM Customer WHERE username = ? AND password = ?', [username, password], (error: mysql.MysqlError, results: Customer[]) =&gt; { if (error) throw error; if (results.length &gt; 0) { res.send({ status: 'success', message: 'Login successful' }); } else { res.send({ status: 'fail', message: 'Login failed' }); } }); }); // 주문 정보 검증 및 처리 app.post('/order', (req: Request, res: Response) =&gt; { const order: Order = req.body; // 주문 검증 로직 (예: 주문 가능 여부 확인, 금액 계산 등) // ... // 주문 정보를 데이터베이스에 저장 connection.query('INSERT INTO Orders SET ?', order, (error: mysql.MysqlError, results: any) =&gt; { if (error) throw error; res.send({ status: 'success', message: 'Order placed successfully', orderId: results.insertId }); }); }); // 주방에 주문 내역 전달 app.post('/order/:orderId/sendToKitchen', (req: Request, res: Response) =&gt; { const { orderId } = req.params; connection.query('UPDATE Orders SET status = \"cooking\" WHERE orderId = ?', [orderId], (error: mysql.MysqlError, results: any) =&gt; { if (error) throw error; res.send({ status: 'success', message: 'Order sent to kitchen successfully' }); }); }); // 배달 상태 업데이트 app.post('/order/:orderId/updateDeliveryStatus', (req: Request, res: Response) =&gt; { const { orderId } = req.params; const { status } = req.body; // 예: \"delivering\" 또는 \"delivered\" connection.query('UPDATE Orders SET deliveryStatus = ? WHERE orderId = ?', [status, orderId], (error: mysql.MysqlError, results: any) =&gt; { if (error) throw error; res.send({ status: 'success', message: 'Delivery status updated successfully' }); }); }); // ... 기타 필요한 액션 함수 . ",
    "url": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#6-%EA%B5%AC%ED%98%84",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/2024-01-29-2/#6-구현"
  },"27": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "리액트 상태 관리 라이브러리 비교",
    "content": "2024. 2. 7. React . INDEX . | 0. npm trends 비교 | 1. Redux | 2. Zustand | 3. MobX | 4. Recoil | . ",
    "url": "/docs/Dev/React/2024-02-07-1/#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%B9%84%EA%B5%90",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/#리액트-상태-관리-라이브러리-비교"
  },"28": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "0. npm trends 비교",
    "content": ". ",
    "url": "/docs/Dev/React/2024-02-07-1/#0-npm-trends-%EB%B9%84%EA%B5%90",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/#0-npm-trends-비교"
  },"29": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "1. Redux",
    "content": ". Redux는 JavaScript 애플리케이션을 위한 예측 가능한 상태 컨테이너로, 상태 관리를 위한 견고한 아키텍처를 제공합니다. 장점 . 중앙 집중식 상태 관리 . 애플리케이션의 상태를 한 곳에서 관리하며, 상태 변화는 순수 함수인 리듀서를 통해 이루어집니다. 예측 가능한 상태 관리 . Redux는 엄격한 상태 변경 규칙과 순수 함수인 리듀서를 통해 상태 변화를 관리합니다. 이는 상태 변화를 예측 가능하고 추적 가능하게 만듭니다. 타임 트래블 디버깅 . 상태 변화를 기록하고 재생할 수 있는 기능을 통해 디버깅이 용이합니다. 개발자 도구 활용 . Redux DevTools와 같은 도구를 통해 상태 변화를 시간에 따라 추적하고, 액션을 재현하며, 상태 변화를 디버깅할 수 있습니다. 사용자 수와 커뮤니티 . Redux는 많은 사용자와 커뮤니티를 가지고 있으며, 큰 규모의 애플리케이션에 적합하고 많은 플러그인, 미들웨어, 유틸리티가 지원됩니다 . 단점 . 보일러플레이트 코드 . 액션 타입, 액션 생성자, 리듀서 등을 매번 작성해야 하므로 초기 설정과 상태 로직 관리를 위해 많은 코드가 필요합니다. 복잡성 . 큰 애플리케이션에서 여러 리듀서를 조합하고, 미들웨어를 관리하는 것이 복잡할 수 있습니다. 비동기 로직의 복잡성 . Redux 자체는 비동기 작업을 처리하지 않기 때문에 Redux Thunk, Redux Saga와 같은 미들웨어를 사용해야 합니다. ",
    "url": "/docs/Dev/React/2024-02-07-1/#1-redux",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/#1-redux"
  },"30": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "2. Zustand",
    "content": ". Zustand는 설정이 간단하고, 직관적인 API를 제공하는 상태 관리 라이브러리입니다. Redux나 Recoil에 비해 더 가벼우며, 상태 관리를 매우 간결하게 할 수 있습니다. 장점 . 간결하고 직관적인 API . Zustand는 매우 단순하고 직관적인 API를 제공하며, 상태 관리를 위한 최소한의 설정만 필요합니다. 컴포넌트 외부에서의 상태 관리 . Zustand는 컴포넌트 밖에서도 상태를 쉽게 관리할 수 있게 해줍니다. 이는 테스트와 재사용을 용이하게 만듭니다. 유연성과 확장성 . Zustand는 미들웨어를 통해 상태 로깅, 지속성, 비동기 처리와 같은 기능을 쉽게 추가할 수 있습니다. 비동기 지원 . Zustand는 비동기 작업을 쉽게 처리할 수 있는 기능을 제공합니다. 단점 . 구조적 제약 . 매우 단순하고 유연한 구조를 가지고 있지만, 이로 인해 큰 규모의 애플리케이션에서는 상태 관리 구조가 복잡해질 수 있습니다. 대규모 프로젝트에서의 검증 . Zustand는 아직 대규모 프로젝트에서의 사용 사례가 많이 보고되지 않았습니다. 따라서, 큰 규모의 프로젝트에서는 신중하게 고려해야 합니다. ",
    "url": "/docs/Dev/React/2024-02-07-1/#2-zustand",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/#2-zustand"
  },"31": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "3. MobX",
    "content": ". MobX는 반응형 프로그래밍 패러다임을 사용하여 상태를 관리합니다. 애플리케이션의 상태가 변경될 때 자동으로 관련된 컴포넌트가 업데이트됩니다. 장점 . 반응형 프로그래밍 . 상태가 변경될 때 자동으로 관련된 컴포넌트가 업데이트됩니다. 성능 최적화 . 종속성 추적을 통해 불필요한 계산이나 리렌더링 없이 효율적으로 작동합니다. 유연성과 간결성 . MobX는 상태를 변경하고 사용하는 방법이 간결하고 직관적입니다. 개발자는 비교적 적은 코드로 상태 관리 로직을 구현할 수 있습니다. 다양한 데이터 구조 지원 . MobX는 객체, 배열, Map, Set 등 다양한 데이터 구조를 자연스럽게 지원합니다. 단점 . 추상적인 개념과 러닝커브 . 반응형 프로그래밍과 종속성 추적은 새로운 사용자에게 다소 추상적이고 이해하기 어려울 수 있습니다. TypeScript와의 통합 복잡성 . MobX는 TypeScript와 함께 사용할 수 있지만, 때때로 타입 시스템과의 통합이 복잡하거나 추가적인 설정을 요구할 수 있습니다. 대규모 상태 관리 시 복잡성 . MobX를 사용하는 대규모 애플리케이션에서는 상태 관리의 복잡성을 관리하기 위한 추가적인 구조와 패턴이 필요할 수 있습니다. ",
    "url": "/docs/Dev/React/2024-02-07-1/#3-mobx",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/#3-mobx"
  },"32": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "4. Recoil",
    "content": ". Recoil은 React의 기본적인 개념과 함께 작동하도록 설계된 상태 관리 라이브러리입니다. Atom과 Selector를 사용하여 상태 관리를 수행합니다. 장점 . React와의 일관된 패턴 . Recoil의 상태는 React의 hooks와 같이 사용될 수 있으며, 컴포넌트 기반 아키텍처와 잘 통합됩니다. Atom 기반의 상태 기반를 통한 렌더링 최적화 . Recoil은 컴포넌트가 필요로 하는 최소한의 상태 변화만을 구독하도록 하여 불필요한 렌더링을 방지합니다. 유연한 데이터 흐름 . Selector를 통해 상태에 기반한 파생 데이터를 쉽게 생성하고 관리할 수 있습니다. 단점 . 상태 복구와 타임 트래블 디버깅의 제한 . Redux의 DevTools와 같은 강력한 상태 타임 트래블 기능을 지원하지 않습니다. Recoil의 상태 변화를 시각화하고 이전 상태로 돌아가는 것이 Redux에 비해 덜 직관적일 수 있습니다. React에 의존적 . Recoil은 React와 밀접하게 통합되어 있어, 다른 프레임워크나 라이브러리와의 호환성이 제한적일 수 있습니다. 컴포넌트 간 상태 공유의 복잡성 . Recoil에서는 atom과 selector를 사용하여 상태를 관리하는데 atom과 selector가 오히려 상태 관리 구조를 복잡하게 만들 수 있습니다. 서버 사이드 렌더링(SSR) 지원의 제한 . Recoil은 클라이언트 사이드에서 잘 작동하지만, 서버 사이드 렌더링을 사용하는 애플리케이션에서는 사용하기가 더 복잡할 수 있습니다. SSR을 사용할 때 Recoil 상태의 동기화와 복구가 추가적인 구현을 필요로 할 수 있습니다. ",
    "url": "/docs/Dev/React/2024-02-07-1/#4-recoil",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/#4-recoil"
  },"33": {
    "doc": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "title": "리액트 상태 관리 라이브러리 비교(Redux, Recoil, Zustand)",
    "content": " ",
    "url": "/docs/Dev/React/2024-02-07-1/",
    
    "relUrl": "/docs/Dev/React/2024-02-07-1/"
  },"34": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "content": "2024. 2. 14. CSS . INDEX . | 0. npm trends 비교 | 1. CSS 모듈 | 2. CSS-in-JS | 3. CSS 프레임워크 | 4. 언제 어떤 것을 사용해야 할까요? | 5. 왜 CSS 프레임워크의 인기가 많아졌을까요? | . ",
    "url": "/docs/Dev/CSS/2024-02-14-1/",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/"
  },"35": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "0. npm trends 비교",
    "content": ". ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#0-npm-trends-%EB%B9%84%EA%B5%90",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#0-npm-trends-비교"
  },"36": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "1. CSS 모듈",
    "content": ". CSS 모듈은 CSS 클래스 이름이 고유하게 되도록 파일 단위로 스타일을 캡슐화하는 방식입니다. 로컬 스코핑(local scoping)을 통해 다른 CSS 파일의 클래스 이름과 충돌하지 않습니다. 주로 React, Vue 같은 컴포넌트 기반 프레임워크에서 사용됩니다. /* Button.module.css */ .button { background-color: blue; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; } . // Button.jsx import styles from './Button.module.css'; function Button({ children }) { return (&lt;button className={styles.button}&gt;{children}&lt;/button&gt;) } export default Button; . 스타일 충돌 방지 . 클래스 이름이 고유하게 변환되어, 다른 스타일과 충돌할 위험이 줄어듭니다. 재사용성: 컴포넌트 별로 스타일을 정의하여 재사용하기 쉽습니다. 유지 관리: 스타일이 컴포넌트에 국한되어 있어 유지 관리가 용이합니다. ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#1-css-%EB%AA%A8%EB%93%88",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#1-css-모듈"
  },"37": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "2. CSS-in-JS",
    "content": ". 자바스크립트를 사용하여 스타일을 직접 작성하고, 컴포넌트에 스타일을 적용하는 방식입니다. Styled-components, Emotion 같은 라이브러리가 대표적입니다. 런타임에 스타일이 적용되며, 동적 스타일링이 가능합니다. import styled from 'styled-components'; const Button = styled.button` background-color: blue; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; &amp;:hover { background-color: darkblue; } `; function App() { return (&lt;Button&gt;Click Me&lt;/Button&gt;) } export default App; . 동적 스타일링 . 상태나 속성에 따라 스타일을 쉽게 변경할 수 있습니다. 스타일 캡슐화 . 컴포넌트 단위로 스타일이 적용되어, 충돌을 방지합니다. 의존성 감소 . CSS 파일을 따로 관리할 필요 없이, 자바스크립트 파일 내에서 관리됩니다. ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#2-css-in-js",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#2-css-in-js"
  },"38": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "3. CSS 프레임워크",
    "content": ". 사전에 정의된 스타일 클래스를 제공하여, 빠르게 웹 인터페이스를 디자인할 수 있게 돕는 도구입니다. 유틸리티-퍼스트 방식의 Tailwind CSS가 대표적입니다. import styled from 'styled-components'; function App() { return ( &lt;button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"&gt; Click Me &lt;/button&gt; ) } export default App; . 빠른 개발 . 사전에 정의된 스타일을 사용하여 빠르게 인터페이스를 구성할 수 있습니다. 일관성 . 디자인 시스템 내에서 일관된 스타일링을 유지할 수 있습니다. 사용 용이성 . 복잡한 CSS를 직접 작성하지 않고도 다양한 디자인을 구현할 수 있습니다. ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#3-css-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#3-css-프레임워크"
  },"39": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "4. 언제 어떤 것을 사용해야 할까요?",
    "content": ". 1. 개발 속도와 생산성이 중요한 경우 . CSS 프레임워크 &gt; CSS 모듈 &gt; CSS-in-JS . CSS 프레임워크는 사전에 정의된 스타일과 유틸리티 클래스를 통해 CSS를 작성하는 시간을 대폭 줄일 수 있습니다. 따라서, 빠른 프로토타이핑과 생산성 향상에 유리합니다. 2. 유지 관리와 확장성이 중요한 대규모 프로젝트 . CSS-in-JS &gt; CSS 모듈 &gt; CSS 프레임워크 . CSS-in-JS는 스타일을 컴포넌트 단위로 캡슐화하고, 조건부 스타일링 등 복잡한 로직을 쉽게 구현할 수 있어 대규모 프로젝트의 유지 관리와 확장성에 유리합니다. CSS 모듈도 유사한 이점을 제공하지만, CSS-in-JS만큼의 유연성은 제공하지 않습니다. CSS 프레임워크는 초기 개발 속도는 빠를 수 있으나, 대규모 프로젝트에서의 맞춤화와 확장성 측면에서 제약이 있을 수 있습니다. 3. 동적 스타일링이 필요한 경우 . CSS-in-JS &gt; CSS 모듈 &gt; CSS 프레임워크 . CSS-in-JS는 자바스크립트를 이용한 동적 스타일링을 자연스럽게 지원하여, 상태나 속성에 따른 스타일 변화를 쉽게 구현할 수 있습니다. CSS 모듈은 CSS 변수나 자바스크립트와의 결합을 통해 비슷한 기능을 구현할 수 있으나, CSS-in-JS만큼 직관적이지 않습니다. CSS 프레임워크는 동적 스타일링을 위해 추가적인 자바스크립트 로직이 필요할 수 있습니다. 4. 커스텀 디자인과 고유한 브랜딩이 중요한 경우 . CSS-in-JS = CSS 모듈 &gt; CSS 프레임워크 . CSS-in-JS와 CSS 모듈은 고유한 디자인을 자유롭게 구현할 수 있게 해주며, 특히 CSS-in-JS는 동적으로 스타일을 조정할 수 있는 능력이 뛰어납니다. 반면, CSS 프레임워크는 유틸리티 클래스를 통한 디자인 제공으로, 고유한 브랜딩과 맞춤 디자인 구현에 제약이 있을 수 있습니다. ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#4-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C%EC%9A%94",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#4-언제-어떤-것을-사용해야-할까요"
  },"40": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "5. 왜 CSS 프레임워크의 인기가 많아졌을까요?",
    "content": ". ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#5-%EC%99%9C-css-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9D%B8%EA%B8%B0%EA%B0%80-%EB%A7%8E%EC%95%84%EC%A1%8C%EC%9D%84%EA%B9%8C%EC%9A%94",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#5-왜-css-프레임워크의-인기가-많아졌을까요"
  },"41": {
    "doc": "CSS Module, CSS-in-JS, CSS Framework 비교 및 선택",
    "title": "CSS-in-JS의 한계",
    "content": "1. 성능 . 런타임 오버헤드 . CSS-in-JS 라이브러리는 JavaScript를 통해 스타일을 동적으로 생성하고 적용합니다. 이 과정은 런타임에 발생하는 오버헤드를 초래하며, 특히 DOM 업데이트가 빈번한 애플리케이션에서 성능 저하를 일으킬 수 있습니다. 번들 크기 증가 . CSS-in-JS 라이브러리를 프로젝트에 추가하면 최종 번들의 크기가 커질 수 있습니다. 사용하는 라이브러리의 크기와 방식에 따라 달라지지만, 이는 초기 로딩 시간에 영향을 줄 수 있습니다. 2. 서버 사이드 렌더링(SSR) 복잡성 . SSR과의 호환성 . CSS-in-JS는 서버 사이드 렌더링 환경에서 추가적인 설정이나 고려사항을 요구할 수 있습니다. 스타일이 JavaScript와 밀접하게 연결되어 있기 때문에, 서버에서 HTML과 함께 초기 스타일을 적절히 로드하고 전달하는 과정이 복잡해질 수 있습니다. 3. 도구 및 라이브러리 의존성 . 라이브러리 의존성 . 특정 CSS-in-JS 라이브러리에 대한 의존성이 생깁니다. 프로젝트에서 다른 라이브러리로 전환하거나, 라이브러리가 더 이상 지원되지 않을 경우, 이전이 어려울 수 있습니다. 4. 접근성 및 검색 엔진 최적화(SEO) . 스타일 로딩 지연 . JavaScript를 통해 스타일이 적용되기 때문에, 스타일 로딩이 지연될 수 있으며 이는 특히 검색 엔진 봇이 페이지를 크롤링할 때 문제가 될 수 있습니다. 이는 접근성과 SEO에 부정적인 영향을 줄 수 있습니다. ",
    "url": "/docs/Dev/CSS/2024-02-14-1/#css-in-js%EC%9D%98-%ED%95%9C%EA%B3%84",
    
    "relUrl": "/docs/Dev/CSS/2024-02-14-1/#css-in-js의-한계"
  },"42": {
    "doc": "LOG",
    "title": "CHANGELOG",
    "content": "This blog started in 2024. ",
    "url": "/CHANGELOG/#changelog",
    
    "relUrl": "/CHANGELOG/#changelog"
  },"43": {
    "doc": "LOG",
    "title": "LOG",
    "content": " ",
    "url": "/CHANGELOG/",
    
    "relUrl": "/CHANGELOG/"
  },"44": {
    "doc": "TypeScript",
    "title": "TypeScript",
    "content": "TypeScript . ",
    "url": "/docs/Dev/TypeScript/",
    
    "relUrl": "/docs/Dev/TypeScript/"
  },"45": {
    "doc": "HTML",
    "title": "HTML",
    "content": "HTML . ",
    "url": "/docs/Dev/HTML/",
    
    "relUrl": "/docs/Dev/HTML/"
  },"46": {
    "doc": "Next.js",
    "title": "Next.js",
    "content": "Next.js . ",
    "url": "/docs/Dev/Next.js/",
    
    "relUrl": "/docs/Dev/Next.js/"
  },"47": {
    "doc": "JavaScript",
    "title": "JavaScript",
    "content": "JavaScript . ",
    "url": "/docs/Dev/JavaScript/",
    
    "relUrl": "/docs/Dev/JavaScript/"
  },"48": {
    "doc": "React",
    "title": "React",
    "content": "React . ",
    "url": "/docs/Dev/React/",
    
    "relUrl": "/docs/Dev/React/"
  },"49": {
    "doc": "Dev",
    "title": "Dev",
    "content": "개발과 관련된 글을 포스팅합니다. ",
    "url": "/docs/Dev/",
    
    "relUrl": "/docs/Dev/"
  },"50": {
    "doc": "Home",
    "title": "Home",
    "content": "송문석(D2G2) . Frontend Developer . Interested in . dev . design . Skills . TypeScript . React . Next.js . Node.js . Express . mysql . studying . functional programming . ",
    "url": "/",
    
    "relUrl": "/"
  },"51": {
    "doc": "프리온보딩 FE 챌린지 2월",
    "title": "프리온보딩 FE 챌린지 2월",
    "content": " ",
    "url": "/docs/Course/fechallenge02/",
    
    "relUrl": "/docs/Course/fechallenge02/"
  },"52": {
    "doc": "웹 풀사이클 데브코스",
    "title": "웹 풀사이클 데브코스",
    "content": " ",
    "url": "/docs/Course/devcourse/",
    
    "relUrl": "/docs/Course/devcourse/"
  },"53": {
    "doc": "Course",
    "title": "Course",
    "content": " ",
    "url": "/docs/Course/",
    
    "relUrl": "/docs/Course/"
  },"54": {
    "doc": "Books",
    "title": "Books",
    "content": "책을 읽고 얻은 인사이트를 기록합니다. ",
    "url": "/docs/Books/",
    
    "relUrl": "/docs/Books/"
  },"55": {
    "doc": "CSS",
    "title": "CSS",
    "content": "CSS . ",
    "url": "/docs/Dev/CSS/",
    
    "relUrl": "/docs/Dev/CSS/"
  },"56": {
    "doc": "Troubleshootings",
    "title": "Troubleshootings",
    "content": "Troubleshootings . ",
    "url": "/docs/Dev/Troubleshootings/",
    
    "relUrl": "/docs/Dev/Troubleshootings/"
  },"57": {
    "doc": "Functional Programming",
    "title": "Functional Programming",
    "content": "함수형 프로그래밍을 공부한 내용을 기록합니다. ",
    "url": "/docs/Dev/FunctionalProgramming/",
    
    "relUrl": "/docs/Dev/FunctionalProgramming/"
  },"58": {
    "doc": "Design",
    "title": "Design",
    "content": "디자인과 관련된 글을 포스팅합니다. ",
    "url": "/docs/Design/",
    
    "relUrl": "/docs/Design/"
  }
}
